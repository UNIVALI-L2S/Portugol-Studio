ext {
    
    mainClass = 'br.univali.ps.ui.Lancador'    
    splashScreen = 'splash.png'
}

dependencies {

    compile project(':portugol-core')
    
    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    compile group: 'commons-codec', name: 'commons-codec', version: '1.6'
    
    // https://mvnrepository.com/artifact/org.apache.commons/commons-exec
    compile group: 'org.apache.commons', name: 'commons-exec', version: '1.3'
    
    // https://mvnrepository.com/artifact/commons-io/commons-io
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    
    // https://mvnrepository.com/artifact/commons-logging/commons-logging
    compile group: 'commons-logging', name: 'commons-logging', version: '1.1.3'
    
    // https://mvnrepository.com/artifact/org.apache.httpcomponents/fluent-hc
    compile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: '4.3.3'
    
    // https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.3.3'
    
    // https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient-cache
    compile group: 'org.apache.httpcomponents', name: 'httpclient-cache', version: '4.3.3'
    
    // https://mvnrepository.com/artifact/org.apache.httpcomponents/httpmime
    compile group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.3.3'
    
    // https://mvnrepository.com/artifact/org.jsoup/jsoup
    compile group: 'org.jsoup', name: 'jsoup', version: '1.7.2'

    // https://mvnrepository.com/artifact/com.fifesoft/autocomplete
    compile group: 'com.fifesoft', name: 'autocomplete', version: '2.5.4'
    
    // https://mvnrepository.com/artifact/com.fifesoft/rstaui
    compile group: 'com.fifesoft', name: 'rstaui', version: '2.5.4'
    
    // https://mvnrepository.com/artifact/com.fifesoft/rsyntaxtextarea
    compile group: 'com.fifesoft', name: 'rsyntaxtextarea', version: '2.5.4'
    
    // https://mvnrepository.com/artifact/net.sf.cssbox/swingbox
    compile group: 'net.sf.cssbox', name: 'swingbox', version: '1.1'
    
    // https://mvnrepository.com/artifact/net.lingala.zip4j/zip4j
    compile group: 'net.lingala.zip4j', name: 'zip4j', version: '1.3.1'

    
    // Nenhuma das versões abaixo compila, então usamos a versão local
    //
    //    // https://mvnrepository.com/artifact/de.sciss/weblaf-core
    //    compile group: 'de.sciss', name: 'weblaf-core', version: '2.0.0'
    //    
    //    // https://mvnrepository.com/artifact/de.sciss/weblaf-ui
    //    compile group: 'de.sciss', name: 'weblaf-ui', version: '2.0.0'
    //
    //    // https://mvnrepository.com/artifact/com.weblookandfeel/weblaf-core
    //    compile group: 'com.weblookandfeel', name: 'weblaf-core', version: '1.2.8'
    //    
    //    // https://mvnrepository.com/artifact/com.weblookandfeel/weblaf-ui
    //    compile group: 'com.weblookandfeel', name: 'weblaf-ui', version: '1.2.8'    
}

task run(type: JavaExec) {
    
    def jvmConfigFile = new File(project.projectDir, 'jvm.config')
    def jvmargs = jvmConfigFile.readLines()
    
    jvmargs.add('-splash:' + new File(project.projectDir, 'src/main/resources/' + splashScreen))
    jvmargs.add('-Xdock:icon=' + new File(rootProject.projectDir, 'installer/arquivos/osx/icones/portugol-studio.icns').getPath())

    main = mainClass
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = jvmargs
    description = 'Runs this program as a JVM application'
    group = 'application'
}

task debug(type: JavaExec) {
    
    def jvmConfigFile = new File(project.projectDir, 'jvm.config')
    def jvmargs = jvmConfigFile.readLines()
    
    jvmargs.add('-splash:' + new File(project.projectDir, 'src/main/resources/' + splashScreen))
    jvmargs.add('-Xdock:icon=' + new File(rootProject.projectDir, 'installer/arquivos/osx/icones/portugol-studio.icns').getPath())
    
    main = mainClass
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = jvmargs
    description = 'Runs this program as a JVM application for debugging'
    group = 'application'
    debug = true
}

def createRunConfigurationsForEclipse(){

	def baseDir = new File(rootProject.projectDir, '.settings/launch-config')
	
	baseDir.mkdirs()
	
	def jvmConfigFile = new File(project.projectDir, 'jvm.config')
    
    def jvmargs = '-splash:${workspace_loc:portugol-ide}/src/main/resources/' + splashScreen + ' ' + jvmConfigFile.readLines().join(' ')
	
	def studioRunConfig = 	
		'<?xml version="1.0" encoding="UTF-8" standalone="no"?>' +
		'	<launchConfiguration type="org.eclipse.jdt.launching.localJavaApplication">' + 
		'	<listAttribute key="org.eclipse.debug.ui.favoriteGroups">' +
		'		<listEntry value="org.eclipse.debug.ui.launchGroup.run"/>' +
        '		<listEntry value="org.eclipse.debug.ui.launchGroup.debug"/>' +
		'	</listAttribute>' +
		'	<booleanAttribute key="org.eclipse.jdt.launching.ATTR_USE_START_ON_FIRST_THREAD" value="true"/>' +
		'	<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="' + mainClass + '"/>' +
		'	<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="portugol-ide"/>' +
		'	<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="' + jvmargs + '"/>' +
		'	<stringAttribute key="org.eclipse.jdt.launching.WORKING_DIRECTORY" value="${workspace_loc:portugol-ide}"/>'+
		'	</launchConfiguration>'
	
	def runConfigFile = new File(baseDir, 'Portugol Studio.launch')
	
	runConfigFile.createNewFile()
	runConfigFile.write(studioRunConfig)

    rootProject.tasks.findAll { task -> task.name.startsWith('dist') }.each({task -> 

        createGradleTaskConfigurationForEclipse(baseDir, task.name)
        
    })
}

def createGradleTaskConfigurationForEclipse(baseDir, taskName) {

    def configFile = new File(baseDir, 'Portugol Studio - Gradle [' + taskName + '].launch')
    def configContent = 
        '<?xml version="1.0" encoding="UTF-8" standalone="no"?>' +
        '<launchConfiguration type="org.eclipse.buildship.core.launch.runconfiguration">' +
        '   <listAttribute key="arguments"/>' +
        '   <stringAttribute key="gradle_distribution" value="GRADLE_DISTRIBUTION(WRAPPER)"/>' +
        '   <listAttribute key="jvm_arguments"/>' +
        '   <listAttribute key="org.eclipse.debug.ui.favoriteGroups">' +
        '       <listEntry value="org.eclipse.debug.ui.launchGroup.run"/>' +
        '   </listAttribute>' +
        '   <booleanAttribute key="show_console_view" value="true"/>' +
        '   <booleanAttribute key="show_execution_view" value="true"/>' +
        '   <listAttribute key="tasks">' +
        '       <listEntry value="' + taskName + '"/>' +
        '   </listAttribute>' +
        '   <booleanAttribute key="use_gradle_distribution_from_import" value="false"/>' +
        '   <stringAttribute key="working_dir" value="${workspace_loc:/portugol-studio}"/>' +
        '</launchConfiguration>'

        configFile.createNewFile()
        configFile.write(configContent)
}

createRunConfigurationsForEclipse()