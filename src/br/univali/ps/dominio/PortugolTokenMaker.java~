package br.univali.ps.dominio;

/* The following code was generated by JFlex 1.4.3 on 8/5/13 5:17 PM */

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 8/5/13 5:17 PM from the specification file
 * <tt>/home/fillipi/workspace/Portugol/Projetos/Portugol-Studio/src/br/univali/ps/dominio/PortugolTokenMaker.flex</tt>
 */
public class PortugolTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 4;
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\47\1\42\1\0\1\47\1\57\22\0\1\47\1\35\1\43"+
    "\1\60\1\61\1\66\1\65\1\33\1\31\1\31\1\50\1\7\1\65"+
    "\1\36\1\55\1\32\1\46\1\54\2\40\4\5\2\3\1\71\1\64"+
    "\1\34\1\30\1\34\1\27\1\62\1\4\1\53\2\4\1\6\1\56"+
    "\5\1\1\52\10\1\1\51\2\1\1\41\2\1\1\63\1\37\1\63"+
    "\1\76\1\2\1\0\1\24\1\45\1\21\1\10\1\11\1\12\1\25"+
    "\1\67\1\13\2\1\1\15\1\26\1\14\1\20\1\23\1\73\1\17"+
    "\1\16\1\70\1\22\1\44\1\72\1\41\1\1\1\74\1\75\1\76"+
    "\1\75\1\65\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\11\2\1\1"+
    "\1\4\1\6\1\4\1\7\1\4\1\1\1\4\1\2"+
    "\1\10\1\11\2\2\1\3\1\12\1\4\1\1\1\2"+
    "\2\13\1\14\5\13\1\15\2\13\2\16\2\3\1\17"+
    "\10\2\1\5\1\2\1\5\4\2\1\0\1\20\1\21"+
    "\2\22\1\23\1\7\2\11\1\24\3\2\2\16\6\1"+
    "\3\0\1\25\6\0\1\3\1\0\1\3\1\16\1\17"+
    "\20\2\1\7\1\26\1\7\3\22\1\7\2\11\1\27"+
    "\3\2\1\30\1\31\4\1\1\32\4\1\16\0\1\17"+
    "\1\0\6\2\1\33\1\2\1\34\6\2\1\7\1\11"+
    "\2\2\2\30\2\31\7\1\4\0\1\32\6\0\1\35"+
    "\2\0\1\36\13\2\1\30\1\31\1\32\3\1\13\0"+
    "\6\2\2\1\1\32\3\0\3\2\2\0\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[249];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\u01b9"+
    "\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1"+
    "\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b\0\u04ad\0\u04ad"+
    "\0\u056a\0\275\0\u04ad\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5"+
    "\0\u06e4\0\u0723\0\u04ad\0\u0762\0\u07a1\0\u04ad\0\u07e0\0\u081f"+
    "\0\u085e\0\u089d\0\u08dc\0\u04ad\0\u091b\0\u095a\0\u0999\0\u09d8"+
    "\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0"+
    "\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\374\0\u0d4a\0\u0d89"+
    "\0\u0dc8\0\u0e07\0\u0e46\0\u04ad\0\u04ad\0\u0e85\0\u0ec4\0\u04ad"+
    "\0\u0f03\0\u0f42\0\u0f81\0\u04ad\0\u0fc0\0\u0fff\0\u103e\0\u107d"+
    "\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275"+
    "\0\u12b4\0\u12f3\0\u04ad\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e"+
    "\0\u146d\0\u14ac\0\u14eb\0\u0999\0\u152a\0\u0999\0\u1569\0\u15a8"+
    "\0\u15e7\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0"+
    "\0\u17df\0\u181e\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959\0\u04ad"+
    "\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u04ad"+
    "\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a"+
    "\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84\0\u1ec3\0\u1f02"+
    "\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa"+
    "\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2"+
    "\0\u2331\0\u2370\0\u23af\0\u23ee\0\374\0\u242d\0\374\0\u246c"+
    "\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664"+
    "\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c"+
    "\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997\0\u29d6\0\u2a15\0\u2a54"+
    "\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c"+
    "\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6\0\u2e05\0\u2e44"+
    "\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u0999\0\u0999"+
    "\0\275\0\u2ffd\0\u303c\0\u307b\0\u30ba\0\u30f9\0\u3138\0\u3177"+
    "\0\u31b6\0\u31f5\0\u3234\0\u3273\0\u2c4c\0\u32b2\0\u2d09\0\u32f1"+
    "\0\u3330\0\u336f\0\u33ae\0\u33ed\0\u342c\0\u346b\0\u34aa\0\u04ad"+
    "\0\u34e9\0\u3528\0\u3567\0\u35a6\0\u35e5\0\u3624\0\u3663\0\u36a2"+
    "\0\u36e1";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[249];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\5\1\6\1\5\1\7\1\5"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\5\1\21\3\5\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\6\1\5\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\23\3\5\1\6"+
    "\1\41\1\5\1\30\1\42\2\4\1\24\1\43\1\27"+
    "\1\23\2\5\1\27\3\5\1\24\1\27\12\44\1\45"+
    "\27\44\1\46\5\44\1\47\16\44\1\50\2\44\1\51"+
    "\4\44\12\52\1\53\27\52\1\54\24\52\1\55\2\52"+
    "\1\56\4\52\7\4\1\0\17\4\10\0\3\4\2\0"+
    "\3\4\2\0\4\4\1\0\1\4\1\0\3\4\4\0"+
    "\2\4\1\0\3\4\2\0\1\4\6\5\1\0\17\5"+
    "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\3\5\2\0\3\57\1\6\1\57\1\6\1\60\1\0"+
    "\1\57\1\60\3\57\1\61\4\57\1\62\4\57\10\0"+
    "\1\57\1\6\1\57\2\0\2\57\1\6\2\0\1\62"+
    "\1\61\1\57\1\6\1\63\1\57\1\0\3\57\4\0"+
    "\2\57\1\0\3\57\11\0\1\27\20\0\1\27\46\0"+
    "\1\4\6\5\1\0\4\5\1\64\1\5\1\65\10\5"+
    "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\3\5\2\0\1\4\6\5\1\0\12\5\1\66\1\5"+
    "\1\67\2\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\4\5"+
    "\1\70\12\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\14\5"+
    "\1\71\2\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\1\5"+
    "\1\72\6\5\1\73\6\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\3\5\2\0\1\4\6\5"+
    "\1\0\1\5\1\74\15\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\3\5\2\0\1\4\6\5"+
    "\1\0\1\5\1\75\15\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\3\5\2\0\1\4\6\5"+
    "\1\0\12\5\1\76\4\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\3\5\2\0\1\4\6\5"+
    "\1\0\10\5\1\77\3\5\1\100\2\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"+
    "\1\4\6\5\1\0\7\5\1\101\4\5\1\102\2\5"+
    "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\3\5\31\0\1\103\77\0\1\27\175\0\1\27\1\0"+
    "\1\104\15\0\1\105\26\0\27\106\1\107\3\106\1\110"+
    "\3\106\1\111\2\106\1\0\34\106\30\0\1\27\5\0"+
    "\1\27\40\0\37\34\1\112\2\34\1\113\1\114\33\34"+
    "\1\4\6\5\1\0\1\5\1\115\12\5\1\116\2\5"+
    "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\3\5\2\0\1\4\6\5\1\0\3\5\1\117\13\5"+
    "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\3\5\2\0\3\57\1\6\1\57\1\6\1\60\1\0"+
    "\1\57\1\60\3\57\1\61\4\57\1\62\4\57\10\0"+
    "\1\57\1\6\1\120\2\0\1\57\1\121\1\6\2\0"+
    "\1\62\1\61\1\121\1\6\1\63\1\57\1\0\3\57"+
    "\4\0\2\57\1\0\3\57\51\0\1\40\32\0\1\63"+
    "\1\0\1\63\32\0\1\63\5\0\1\63\5\0\1\63"+
    "\22\0\7\4\1\0\1\122\1\123\1\4\1\124\1\4"+
    "\1\125\4\4\1\126\1\127\3\4\10\0\3\4\2\0"+
    "\3\4\1\130\1\0\4\4\1\0\1\4\1\0\3\4"+
    "\4\0\2\4\1\0\3\4\2\0\12\44\1\0\27\44"+
    "\1\0\5\44\1\0\16\44\1\0\2\44\1\0\4\44"+
    "\13\0\1\131\54\0\1\132\40\0\1\133\134\0\1\134"+
    "\100\0\1\135\4\0\12\52\1\0\27\52\1\0\24\52"+
    "\1\0\2\52\1\0\4\52\13\0\1\136\54\0\1\137"+
    "\76\0\1\140\100\0\1\141\4\0\7\57\1\0\17\57"+
    "\10\0\3\57\2\0\3\57\2\0\4\57\1\0\1\57"+
    "\1\0\3\57\4\0\2\57\1\0\3\57\2\0\3\57"+
    "\1\142\1\57\1\142\1\57\1\143\17\57\7\0\1\143"+
    "\1\57\1\142\1\57\2\0\2\57\1\142\2\0\3\57"+
    "\1\142\1\0\1\57\1\0\3\57\4\0\2\57\1\0"+
    "\3\57\2\0\7\57\1\0\12\57\1\144\4\57\10\0"+
    "\3\57\2\0\3\57\2\0\1\144\3\57\1\0\1\57"+
    "\1\0\3\57\4\0\2\57\1\0\3\57\2\0\7\57"+
    "\1\0\5\57\1\144\11\57\10\0\3\57\2\0\3\57"+
    "\2\0\1\57\1\144\2\57\1\0\1\57\1\0\3\57"+
    "\4\0\2\57\1\0\3\57\2\0\3\57\1\63\1\57"+
    "\1\63\1\145\1\0\1\57\1\145\1\146\2\57\1\146"+
    "\11\57\10\0\1\57\1\63\1\57\2\0\2\57\1\63"+
    "\2\0\1\57\1\146\1\57\1\63\1\0\1\146\1\0"+
    "\3\57\4\0\2\57\1\0\3\57\2\0\1\4\6\5"+
    "\1\0\17\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\1\5\1\147\1\5\2\0\1\4\6\5"+
    "\1\0\11\5\1\150\5\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\3\5\2\0\1\4\6\5"+
    "\1\0\4\5\1\151\12\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\3\5\2\0\1\4\6\5"+
    "\1\0\5\5\1\152\3\5\1\153\5\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"+
    "\1\4\6\5\1\0\11\5\1\154\5\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\155\1\0\3\5"+
    "\2\0\1\4\6\5\1\0\10\5\1\76\6\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\2\0\1\4\6\5\1\0\3\5\1\156\13\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\2\0\1\4\6\5\1\0\15\5\1\157\1\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\2\0\1\4\6\5\1\0\4\5\1\13\12\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\2\0\1\4\6\5\1\0\14\5\1\160\2\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\161\1\0"+
    "\3\5\2\0\1\4\6\5\1\0\4\5\1\162\12\5"+
    "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\3\5\2\0\1\4\6\5\1\0\1\163\5\5\1\71"+
    "\1\164\7\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\10\5"+
    "\1\165\6\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\7\5"+
    "\1\166\7\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\32\0\7\27\40\0\33\167\1\170"+
    "\6\167\1\0\63\167\1\171\3\167\1\170\6\167\1\0"+
    "\41\167\1\172\4\167\1\106\1\167\1\106\2\167\1\106"+
    "\4\167\1\106\2\167\1\106\3\167\1\173\3\167\1\106"+
    "\1\174\1\175\1\0\3\106\1\174\5\167\1\174\13\167"+
    "\1\106\6\167\5\113\1\34\4\113\1\34\1\113\1\34"+
    "\2\113\1\34\4\113\1\34\2\113\1\34\3\113\1\34"+
    "\3\113\2\34\1\176\1\0\4\34\5\113\1\34\13\113"+
    "\1\34\45\113\1\177\3\113\1\200\33\113\1\4\6\5"+
    "\1\0\7\5\1\201\7\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\3\5\2\0\1\4\6\5"+
    "\1\0\17\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\2\5\1\202\2\0\1\4\6\5\1\0"+
    "\17\5\10\0\1\4\2\5\2\0\1\5\1\203\1\5"+
    "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\3\5\2\0\3\57\4\204\1\0"+
    "\3\204\6\57\1\204\2\57\1\204\2\57\10\0\1\57"+
    "\1\204\1\57\2\0\1\57\2\204\2\0\2\57\2\204"+
    "\1\0\1\204\1\0\3\57\4\0\2\57\1\0\3\57"+
    "\2\0\7\57\1\0\17\57\10\0\3\57\2\0\2\57"+
    "\1\205\2\0\3\57\1\205\1\0\1\57\1\0\3\57"+
    "\4\0\2\57\1\0\3\57\2\0\7\4\1\0\1\4"+
    "\1\206\15\4\10\0\3\4\2\0\3\4\2\0\4\4"+
    "\1\0\1\4\1\0\3\4\4\0\2\4\1\0\3\4"+
    "\2\0\7\4\1\0\4\4\1\207\1\210\1\4\1\211"+
    "\7\4\10\0\3\4\2\0\3\4\2\0\4\4\1\0"+
    "\1\4\1\0\3\4\4\0\2\4\1\0\3\4\2\0"+
    "\7\4\1\0\2\4\1\212\1\4\1\213\12\4\10\0"+
    "\3\4\2\0\3\4\2\0\4\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\3\4\2\0\7\4\1\0"+
    "\3\4\1\214\13\4\10\0\3\4\2\0\3\4\2\0"+
    "\4\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\3\4\2\0\7\4\1\0\4\4\1\215\12\4\10\0"+
    "\3\4\2\0\3\4\2\0\4\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\3\4\2\0\7\4\1\0"+
    "\7\4\1\216\7\4\10\0\3\4\2\0\3\4\2\0"+
    "\4\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\3\4\12\0\1\217\1\220\1\0\1\221\1\0\1\222"+
    "\4\0\1\223\1\224\23\0\1\130\44\0\1\225\104\0"+
    "\1\226\143\0\1\227\100\0\1\230\21\0\1\231\104\0"+
    "\1\232\143\0\1\233\100\0\1\234\4\0\3\57\1\142"+
    "\1\57\1\142\1\57\1\0\5\57\1\61\4\57\1\62"+
    "\4\57\10\0\1\57\1\142\1\57\2\0\2\57\1\142"+
    "\2\0\1\62\1\61\1\57\1\142\1\0\1\57\1\0"+
    "\3\57\4\0\2\57\1\0\3\57\5\0\1\142\1\0"+
    "\1\142\32\0\1\142\5\0\1\142\5\0\1\142\22\0"+
    "\3\57\1\235\1\57\1\235\1\57\1\236\17\57\7\0"+
    "\1\236\1\57\1\235\1\57\2\0\2\57\1\235\2\0"+
    "\3\57\1\235\1\0\1\57\1\0\3\57\4\0\2\57"+
    "\1\0\3\57\2\0\1\4\6\5\1\0\12\5\1\237"+
    "\4\5\10\0\1\4\2\5\2\0\3\5\2\0\4\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\3\5\2\0\1\4\6\5\1\0\7\5\1\240"+
    "\1\241\6\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\11\5"+
    "\1\13\5\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\6\5"+
    "\1\242\10\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\14\5"+
    "\1\76\2\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\5\5"+
    "\1\243\11\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\1\5"+
    "\1\244\15\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\14\5"+
    "\1\245\2\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\3\5"+
    "\1\246\13\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\5\5"+
    "\1\247\11\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\10\5"+
    "\1\250\6\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\2\0\1\4\6\5\1\0\6\5"+
    "\1\251\10\5\10\0\1\4\2\5\2\0\3\5\2\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\1\5\1\252\1\0\3\5\2\0\1\4\6\5\1\0"+
    "\1\5\1\253\15\5\10\0\1\4\2\5\2\0\3\5"+
    "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"+
    "\14\5\1\254\2\5\10\0\1\4\2\5\2\0\3\5"+
    "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"+
    "\15\5\1\255\1\5\10\0\1\4\2\5\2\0\3\5"+
    "\2\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\3\5\2\0\1\4\6\5\1\0"+
    "\1\5\1\76\12\5\1\76\2\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\4\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\3\5\2\0\33\167"+
    "\1\110\6\167\1\0\64\167\3\106\1\173\3\106\3\167"+
    "\1\0\41\167\1\106\25\167\1\170\4\167\1\106\1\167"+
    "\1\0\3\167\1\106\5\167\1\106\22\167\33\0\1\170"+
    "\43\0\5\167\1\172\25\167\1\170\4\167\1\172\1\167"+
    "\1\0\3\167\1\172\5\167\1\172\25\167\4\256\1\167"+
    "\3\256\6\167\1\256\2\167\1\256\6\167\1\110\4\167"+
    "\1\256\1\167\1\0\2\167\2\256\4\167\2\256\1\167"+
    "\1\256\20\167\3\113\4\257\1\113\3\257\6\113\1\257"+
    "\2\113\1\257\12\113\1\177\1\257\2\113\1\200\1\113"+
    "\2\257\4\113\2\257\1\113\1\257\62\113\1\0\34\113"+
    "\1\4\6\5\1\0\1\260\16\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\4\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\3\5\2\0\1\4"+
    "\6\5\1\0\3\5\1\242\13\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\4\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\3\5\2\0\1\4"+
    "\6\5\1\0\5\5\1\261\11\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\4\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\3\5\2\0\3\57"+
    "\4\204\1\0\3\204\2\57\1\262\3\57\1\204\1\263"+
    "\1\57\1\204\2\57\10\0\1\57\1\204\1\57\2\0"+
    "\1\57\2\204\2\0\1\263\1\262\2\204\1\0\1\204"+
    "\1\0\3\57\4\0\2\57\1\0\3\57\2\0\7\57"+
    "\1\0\5\57\1\264\4\57\1\265\4\57\10\0\3\57"+
    "\2\0\2\57\1\205\2\0\1\265\1\264\1\57\1\205"+
    "\1\0\1\57\1\0\3\57\4\0\2\57\1\0\3\57"+
    "\2\0\7\4\1\0\2\4\1\125\14\4\10\0\3\4"+
    "\2\0\3\4\2\0\4\4\1\0\1\4\1\0\3\4"+
    "\4\0\2\4\1\0\3\4\2\0\7\4\1\0\1\266"+
    "\16\4\10\0\3\4\2\0\3\4\2\0\4\4\1\0"+
    "\1\4\1\0\3\4\4\0\2\4\1\0\3\4\2\0"+
    "\7\4\1\0\3\4\1\267\2\4\1\270\10\4\10\0"+
    "\3\4\2\0\3\4\2\0\4\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\3\4\2\0\7\4\1\0"+
    "\7\4\1\271\7\4\10\0\3\4\2\0\3\4\2\0"+
    "\4\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\3\4\2\0\7\4\1\0\1\272\3\4\1\215\12\4"+
    "\10\0\3\4\2\0\3\4\2\0\4\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\3\4\2\0\7\4"+
    "\1\0\11\4\1\273\5\4\10\0\3\4\2\0\3\4"+
    "\2\0\4\4\1\0\1\4\1\0\3\4\4\0\2\4"+
    "\1\0\3\4\2\0\7\4\1\0\4\4\1\270\12\4"+
    "\10\0\3\4\2\0\3\4\2\0\4\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\3\4\2\0\7\4"+
    "\1\0\1\272\16\4\10\0\3\4\2\0\3\4\2\0"+
    "\4\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\3\4\2\0\7\4\1\0\14\4\1\274\2\4\10\0"+
    "\3\4\2\0\3\4\2\0\4\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\3\4\13\0\1\275\101\0"+
    "\1\276\1\277\1\0\1\300\71\0\1\301\1\0\1\302"+
    "\75\0\1\303\77\0\1\304\101\0\1\305\70\0\1\226"+
    "\156\0\1\306\30\0\1\307\130\0\1\310\32\0\1\232"+
    "\156\0\1\311\30\0\1\312\130\0\1\313\21\0\3\57"+
    "\1\235\1\57\1\235\1\57\1\0\2\57\1\146\2\57"+
    "\1\146\11\57\10\0\1\57\1\235\1\57\2\0\2\57"+
    "\1\235\2\0\1\57\1\146\1\57\1\235\1\0\1\146"+
    "\1\0\3\57\4\0\2\57\1\0\3\57\5\0\1\235"+
    "\1\0\1\235\32\0\1\235\5\0\1\235\5\0\1\235"+
    "\22\0\1\4\6\5\1\0\14\5\1\314\2\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\2\0\1\4\6\5\1\0\1\5\1\315\15\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\2\0\1\4\6\5\1\0\5\5\1\316\11\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\2\0\1\4\6\5\1\0\10\5\1\247\6\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\2\0\1\4\6\5\1\0\12\5\1\153\4\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\2\0\1\4\6\5\1\0\3\5\1\317\13\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\2\0\1\4\6\5\1\0\11\5\1\242\5\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\2\0\1\4\6\5\1\0\7\5\1\320\7\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\2\0\1\4\6\5\1\0\17\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\4\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\76\1\0\3\5\2\0"+
    "\1\4\6\5\1\0\7\5\1\321\7\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"+
    "\1\4\6\5\1\0\3\5\1\322\13\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"+
    "\1\4\6\5\1\0\11\5\1\323\5\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"+
    "\1\4\6\5\1\0\7\5\1\324\7\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"+
    "\3\167\4\106\1\167\3\106\6\167\1\106\2\167\1\106"+
    "\6\167\1\110\4\167\1\106\1\167\1\0\2\167\2\106"+
    "\4\167\2\106\1\167\1\106\20\167\3\113\4\34\1\113"+
    "\3\34\6\113\1\34\2\113\1\34\12\113\1\177\1\34"+
    "\2\113\1\200\1\113\2\34\4\113\2\34\1\113\1\34"+
    "\20\113\1\4\6\5\1\0\14\5\1\325\2\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\2\0\1\4\6\5\1\0\3\5\1\326\13\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\2\0\7\57\1\0\12\57\1\327\4\57\10\0\3\57"+
    "\2\0\3\57\2\0\1\327\3\57\1\0\1\57\1\0"+
    "\3\57\4\0\2\57\1\0\3\57\2\0\7\57\1\0"+
    "\5\57\1\327\11\57\10\0\3\57\2\0\3\57\2\0"+
    "\1\57\1\327\2\57\1\0\1\57\1\0\3\57\4\0"+
    "\2\57\1\0\3\57\2\0\7\57\1\0\12\57\1\330"+
    "\4\57\10\0\3\57\2\0\3\57\2\0\1\330\3\57"+
    "\1\0\1\57\1\0\3\57\4\0\2\57\1\0\3\57"+
    "\2\0\7\57\1\0\5\57\1\330\11\57\10\0\3\57"+
    "\2\0\3\57\2\0\1\57\1\330\2\57\1\0\1\57"+
    "\1\0\3\57\4\0\2\57\1\0\3\57\2\0\7\4"+
    "\1\0\3\4\1\267\13\4\10\0\3\4\2\0\3\4"+
    "\2\0\4\4\1\0\1\4\1\0\3\4\4\0\2\4"+
    "\1\0\3\4\2\0\7\4\1\0\2\4\1\331\14\4"+
    "\10\0\3\4\2\0\3\4\2\0\4\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\3\4\2\0\7\4"+
    "\1\0\1\4\1\331\15\4\10\0\3\4\2\0\3\4"+
    "\2\0\4\4\1\0\1\4\1\0\3\4\4\0\2\4"+
    "\1\0\3\4\2\0\7\4\1\0\10\4\1\332\6\4"+
    "\10\0\3\4\2\0\3\4\2\0\4\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\3\4\2\0\7\4"+
    "\1\0\1\4\1\267\15\4\10\0\3\4\2\0\3\4"+
    "\2\0\4\4\1\0\1\4\1\0\3\4\4\0\2\4"+
    "\1\0\3\4\2\0\7\4\1\0\5\4\1\333\11\4"+
    "\10\0\3\4\2\0\3\4\2\0\4\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\3\4\2\0\7\4"+
    "\1\0\15\4\1\334\1\4\10\0\3\4\2\0\3\4"+
    "\2\0\4\4\1\0\1\4\1\0\3\4\4\0\2\4"+
    "\1\0\3\4\14\0\1\222\74\0\1\335\101\0\1\336"+
    "\2\0\1\337\77\0\1\340\67\0\1\341\3\0\1\304"+
    "\103\0\1\342\71\0\1\337\72\0\1\341\112\0\1\343"+
    "\104\0\1\344\62\0\1\226\52\0\1\306\6\0\1\310"+
    "\1\345\4\310\1\345\17\310\3\345\1\310\1\345\1\0"+
    "\2\345\1\0\2\310\2\0\3\310\1\0\1\345\4\310"+
    "\1\345\1\310\1\0\1\345\1\310\5\345\2\310\1\345"+
    "\3\310\34\0\1\346\62\0\1\232\52\0\1\311\6\0"+
    "\1\313\1\347\4\313\1\347\17\313\3\347\1\313\1\347"+
    "\1\0\2\347\1\0\2\313\2\0\3\313\1\0\1\347"+
    "\4\313\1\347\1\313\1\0\1\347\1\313\5\347\2\313"+
    "\1\347\3\313\2\0\1\4\6\5\1\0\4\5\1\350"+
    "\12\5\10\0\1\4\2\5\2\0\3\5\2\0\4\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\3\5\2\0\1\4\6\5\1\0\17\5\10\0"+
    "\1\4\2\5\2\0\1\156\2\5\2\0\4\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\3\5\2\0\1\4\6\5\1\0\17\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\153\1\5\1\0\3\5"+
    "\2\0\1\4\6\5\1\0\7\5\1\242\7\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\2\0\1\4\6\5\1\0\4\5\1\351\12\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\2\0\1\4\6\5\1\0\14\5\1\352\2\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\2\0\1\4\6\5\1\0\14\5\1\247\2\5\10\0"+
    "\1\4\2\5\2\0\3\5\2\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\2\0\1\4\6\5\1\0\17\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\4\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\353\1\0\3\5\2\0"+
    "\1\4\6\5\1\0\14\5\1\354\2\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\2\0"+
    "\1\4\6\5\1\0\1\155\16\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\4\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\3\5\2\0\1\4"+
    "\6\5\1\0\10\5\1\355\6\5\10\0\1\4\2\5"+
    "\2\0\3\5\2\0\4\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\3\5\2\0\7\4"+
    "\1\0\7\4\1\331\7\4\10\0\3\4\2\0\3\4"+
    "\2\0\4\4\1\0\1\4\1\0\3\4\4\0\2\4"+
    "\1\0\3\4\2\0\7\4\1\0\12\4\1\356\4\4"+
    "\10\0\3\4\2\0\3\4\2\0\4\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\3\4\2\0\7\4"+
    "\1\0\16\4\1\357\10\0\3\4\2\0\3\4\2\0"+
    "\4\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\3\4\15\0\1\336\75\0\1\360\75\0\1\360\105\0"+
    "\1\361\67\0\1\336\102\0\1\362\106\0\1\363\103\0"+
    "\1\310\76\0\1\313\44\0\1\4\6\5\1\0\17\5"+
    "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\71"+
    "\1\0\3\5\2\0\1\4\6\5\1\0\1\5\1\76"+
    "\15\5\10\0\1\4\2\5\2\0\3\5\2\0\4\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\3\5\2\0\1\4\6\5\1\0\7\5\1\364"+
    "\7\5\10\0\1\4\2\5\2\0\3\5\2\0\4\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\3\5\2\0\1\4\6\5\1\0\1\5\1\365"+
    "\15\5\10\0\1\4\2\5\2\0\3\5\2\0\4\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\3\5\2\0\1\4\6\5\1\0\16\5\1\153"+
    "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\3\5\2\0\1\4\6\5\1\0\17\5\10\0\1\4"+
    "\2\5\2\0\3\5\2\0\4\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\366\1\0\3\5"+
    "\2\0\7\4\1\0\1\270\16\4\10\0\3\4\2\0"+
    "\3\4\2\0\4\4\1\0\1\4\1\0\3\4\4\0"+
    "\2\4\1\0\3\4\2\0\7\4\1\0\14\4\1\331"+
    "\2\4\10\0\3\4\2\0\3\4\2\0\4\4\1\0"+
    "\1\4\1\0\3\4\4\0\2\4\1\0\3\4\21\0"+
    "\1\360\101\0\1\367\102\0\1\370\50\0\1\4\6\5"+
    "\1\0\3\5\1\71\13\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\3\5\2\0\1\4\6\5"+
    "\1\0\7\5\1\247\7\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\3\5\2\0\1\4\6\5"+
    "\1\0\1\5\1\371\15\5\10\0\1\4\2\5\2\0"+
    "\3\5\2\0\4\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\3\5\12\0\1\337\112\0"+
    "\1\360\52\0\1\4\6\5\1\0\11\5\1\153\5\5"+
    "\10\0\1\4\2\5\2\0\3\5\2\0\4\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\3\5\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14112];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\20\1\1\11\2\1\2\11\2\1\1\11\7\1"+
    "\1\11\2\1\1\11\5\1\1\11\26\1\1\0\2\11"+
    "\2\1\1\11\3\1\1\11\13\1\3\0\1\11\6\0"+
    "\1\1\1\0\24\1\1\11\7\1\1\11\16\1\16\0"+
    "\1\1\1\0\36\1\4\0\1\1\6\0\1\1\2\0"+
    "\22\1\13\0\10\1\1\11\3\0\3\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[249];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

    /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;
  
  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public PortugolTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
	private boolean zzRefill() throws java.io.IOException {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) throws java.io.IOException {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PortugolTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public PortugolTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }




  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 26: 
          { addToken(Token.PREPROCESSOR);
          }
        case 31: break;
        case 8: 
          { addNullToken(); return firstToken;
          }
        case 32: break;
        case 22: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 33: break;
        case 21: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
          }
        case 34: break;
        case 17: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 35: break;
        case 10: 
          { addToken(Token.WHITESPACE);
          }
        case 36: break;
        case 24: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 37: break;
        case 18: 
          { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
          }
        case 38: break;
        case 23: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 39: break;
        case 15: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 40: break;
        case 5: 
          { addToken(Token.RESERVED_WORD);
          }
        case 41: break;
        case 6: 
          { addToken(Token.SEPARATOR);
          }
        case 42: break;
        case 25: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 43: break;
        case 2: 
          { addToken(Token.IDENTIFIER);
          }
        case 44: break;
        case 13: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 45: break;
        case 16: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 46: break;
        case 27: 
          { addToken(Token.FUNCTION);
          }
        case 47: break;
        case 7: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 48: break;
        case 9: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 49: break;
        case 28: 
          { addToken(Token.DATA_TYPE);
          }
        case 50: break;
        case 1: 
          { addToken(Token.ERROR_IDENTIFIER);
          }
        case 51: break;
        case 19: 
          { addToken(Token.ERROR_CHAR);
          }
        case 52: break;
        case 20: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 53: break;
        case 30: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 54: break;
        case 29: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 55: break;
        case 14: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 56: break;
        case 3: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 57: break;
        case 4: 
          { addToken(Token.OPERATOR);
          }
        case 58: break;
        case 11: 
          { 
          }
        case 59: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 60: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 250: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 251: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 252: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
