/* The following code was generated by JFlex 1.6.1 */

package br.univali.ps.dominio;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/LITE/Documents/GitHub/Portugol-Studio/src/br/univali/ps/dominio/PortugolTokenMaker.flex</tt>
 */
public class PortugolTokenMaker extends AbstractJFlexCTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MLC = 2;
  public static final int EOL_COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\52\1\42\1\50\1\51\1\47\22\0\1\52\1\35\1\43"+
    "\1\63\1\64\1\71\1\70\1\33\1\31\1\31\1\53\1\7\1\70"+
    "\1\36\1\60\1\32\1\46\1\57\2\40\4\5\2\3\1\74\1\67"+
    "\1\34\1\30\1\34\1\27\1\65\1\4\1\56\2\4\1\6\1\61"+
    "\5\1\1\55\10\1\1\54\2\1\1\41\2\1\1\66\1\37\1\66"+
    "\1\62\1\2\1\0\1\24\1\45\1\21\1\10\1\11\1\12\1\25"+
    "\1\72\1\13\2\1\1\15\1\26\1\14\1\20\1\23\1\76\1\17"+
    "\1\16\1\73\1\22\1\44\1\75\1\41\1\1\1\77\1\100\1\62"+
    "\1\100\1\70\6\0\1\50\u1fa2\0\1\50\1\50\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\11\2\1\1"+
    "\1\4\1\6\1\4\1\7\1\4\1\1\1\4\1\2"+
    "\1\10\1\11\2\2\1\3\1\12\1\4\1\1\1\2"+
    "\2\13\1\14\5\13\1\15\2\13\2\16\2\3\1\17"+
    "\10\2\1\5\1\2\1\5\4\2\1\0\1\20\1\21"+
    "\2\22\1\23\1\7\2\11\1\24\3\2\2\16\6\1"+
    "\3\0\1\25\6\0\1\3\1\0\1\3\1\16\1\17"+
    "\20\2\1\7\1\26\1\7\3\22\1\7\2\11\1\27"+
    "\3\2\2\30\4\1\1\31\4\1\16\0\1\17\1\0"+
    "\6\2\1\32\1\2\1\33\6\2\1\7\1\11\2\2"+
    "\2\30\7\1\4\0\1\31\6\0\1\34\2\0\1\35"+
    "\13\2\1\30\1\31\3\1\13\0\6\2\2\1\1\31"+
    "\3\0\3\2\2\0\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u04d3\0\u04d3"+
    "\0\u0596\0\303\0\u04d3\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db"+
    "\0\u071c\0\u075d\0\u04d3\0\u079e\0\u07df\0\u04d3\0\u0820\0\u0861"+
    "\0\u08a2\0\u08e3\0\u0924\0\u04d3\0\u0965\0\u09a6\0\u09e7\0\u0a28"+
    "\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0c30"+
    "\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0104\0\u0db6\0\u0df7"+
    "\0\u0e38\0\u0e79\0\u0eba\0\u04d3\0\u04d3\0\u0efb\0\u0f3c\0\u04d3"+
    "\0\u0f7d\0\u0fbe\0\u0fff\0\u04d3\0\u1040\0\u1081\0\u10c2\0\u1103"+
    "\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b"+
    "\0\u134c\0\u138d\0\u04d3\0\u13ce\0\u140f\0\u1450\0\u1491\0\u14d2"+
    "\0\u1513\0\u1554\0\u1595\0\u09e7\0\u15d6\0\u09e7\0\u1617\0\u1658"+
    "\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860"+
    "\0\u18a1\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u04d3"+
    "\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u04d3"+
    "\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6"+
    "\0\u1e37\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\u1ffe"+
    "\0\u203f\0\u2080\0\u20c1\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206"+
    "\0\u2247\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c\0\u23cd\0\u240e"+
    "\0\u244f\0\u2490\0\u24d1\0\u2512\0\u0104\0\u2553\0\u0104\0\u2594"+
    "\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c"+
    "\0\u27dd\0\u281e\0\u285f\0\u28a0\0\u28e1\0\u2922\0\u2963\0\u29a4"+
    "\0\u29e5\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac"+
    "\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73\0\u2db4"+
    "\0\u2df5\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc"+
    "\0\u2ffd\0\u303e\0\u307f\0\u30c0\0\u09e7\0\303\0\u3101\0\u3142"+
    "\0\u3183\0\u31c4\0\u3205\0\u3246\0\u3287\0\u32c8\0\u3309\0\u334a"+
    "\0\u338b\0\u2d32\0\u33cc\0\u2df5\0\u340d\0\u344e\0\u348f\0\u34d0"+
    "\0\u3511\0\u3552\0\u3593\0\u35d4\0\u04d3\0\u3615\0\u3656\0\u3697"+
    "\0\u36d8\0\u3719\0\u375a\0\u379b\0\u37dc\0\u381d";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\5\1\6\1\5\1\7\1\5"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\5\1\21\3\5\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\6\1\5\1\33"+
    "\1\34\1\35\1\36\1\37\1\0\1\4\2\40\1\23"+
    "\3\5\1\6\1\41\1\5\1\27\1\42\2\4\1\24"+
    "\1\43\1\27\1\23\2\5\1\27\3\5\1\24\12\44"+
    "\1\45\27\44\1\46\10\44\1\47\16\44\1\50\2\44"+
    "\1\51\3\44\12\52\1\53\27\52\1\54\27\52\1\55"+
    "\2\52\1\56\3\52\7\4\1\0\17\4\10\0\3\4"+
    "\2\0\3\4\1\0\1\4\3\0\4\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\3\4\1\0\1\4"+
    "\6\5\1\0\17\5\10\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\4\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\3\5\1\0\3\57"+
    "\1\6\1\57\1\6\1\60\1\0\1\57\1\60\3\57"+
    "\1\61\4\57\1\62\4\57\10\0\1\57\1\6\1\57"+
    "\2\0\2\57\1\6\1\0\1\57\3\0\1\62\1\61"+
    "\1\57\1\6\1\63\1\57\1\0\3\57\4\0\2\57"+
    "\1\0\3\57\10\0\1\27\20\0\1\27\50\0\1\4"+
    "\6\5\1\0\4\5\1\64\1\5\1\65\10\5\10\0"+
    "\1\4\2\5\2\0\3\5\1\0\1\4\3\0\4\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\3\5\1\0\1\4\6\5\1\0\12\5\1\66"+
    "\1\5\1\67\2\5\10\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\4\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\3\5\1\0\1\4"+
    "\6\5\1\0\4\5\1\70\12\5\10\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\1\0\1\4\6\5\1\0\14\5\1\71\2\5\10\0"+
    "\1\4\2\5\2\0\3\5\1\0\1\4\3\0\4\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\3\5\1\0\1\4\6\5\1\0\1\5\1\72"+
    "\6\5\1\73\6\5\10\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\4\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\3\5\1\0\1\4"+
    "\6\5\1\0\1\5\1\74\15\5\10\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\1\0\1\4\6\5\1\0\1\5\1\75\15\5\10\0"+
    "\1\4\2\5\2\0\3\5\1\0\1\4\3\0\4\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\3\5\1\0\1\4\6\5\1\0\12\5\1\76"+
    "\4\5\10\0\1\4\2\5\2\0\3\5\1\0\1\4"+
    "\3\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\3\5\1\0\1\4\6\5\1\0"+
    "\10\5\1\77\3\5\1\100\2\5\10\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\1\0\1\4\6\5\1\0\7\5\1\101\4\5\1\102"+
    "\2\5\10\0\1\4\2\5\2\0\3\5\1\0\1\4"+
    "\3\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\3\5\30\0\1\103\101\0\1\27"+
    "\201\0\1\27\1\0\1\104\20\0\1\105\25\0\27\106"+
    "\1\107\3\106\1\110\3\106\1\111\2\106\1\0\36\106"+
    "\30\0\1\27\5\0\1\27\42\0\37\34\1\112\2\34"+
    "\1\113\1\114\35\34\1\4\6\5\1\0\1\5\1\115"+
    "\12\5\1\116\2\5\10\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\4\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\3\5\1\0\1\4"+
    "\6\5\1\0\3\5\1\117\13\5\10\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\1\0\3\57\1\6\1\57\1\6\1\60\1\0\1\57"+
    "\1\60\3\57\1\61\4\57\1\62\4\57\10\0\1\57"+
    "\1\6\1\120\2\0\1\57\1\121\1\6\1\0\1\57"+
    "\3\0\1\62\1\61\1\121\1\6\1\63\1\57\1\0"+
    "\3\57\4\0\2\57\1\0\3\57\52\0\2\40\31\0"+
    "\1\63\1\0\1\63\32\0\1\63\5\0\1\63\10\0"+
    "\1\63\21\0\7\4\1\0\1\122\1\123\1\4\1\124"+
    "\1\4\1\125\4\4\1\126\1\127\3\4\10\0\3\4"+
    "\2\0\3\4\1\0\1\4\2\130\1\0\4\4\1\0"+
    "\1\4\1\0\3\4\4\0\2\4\1\0\3\4\1\0"+
    "\12\44\1\0\27\44\1\0\10\44\1\0\16\44\1\0"+
    "\2\44\1\0\3\44\13\0\1\131\57\0\1\132\37\0"+
    "\1\133\141\0\1\134\102\0\1\135\3\0\12\52\1\0"+
    "\27\52\1\0\27\52\1\0\2\52\1\0\3\52\13\0"+
    "\1\136\57\0\1\137\100\0\1\140\102\0\1\141\3\0"+
    "\7\57\1\0\17\57\10\0\3\57\2\0\3\57\1\0"+
    "\1\57\3\0\4\57\1\0\1\57\1\0\3\57\4\0"+
    "\2\57\1\0\3\57\1\0\3\57\1\142\1\57\1\142"+
    "\1\57\1\143\17\57\7\0\1\143\1\57\1\142\1\57"+
    "\2\0\2\57\1\142\1\0\1\57\3\0\3\57\1\142"+
    "\1\0\1\57\1\0\3\57\4\0\2\57\1\0\3\57"+
    "\1\0\7\57\1\0\12\57\1\144\4\57\10\0\3\57"+
    "\2\0\3\57\1\0\1\57\3\0\1\144\3\57\1\0"+
    "\1\57\1\0\3\57\4\0\2\57\1\0\3\57\1\0"+
    "\7\57\1\0\5\57\1\144\11\57\10\0\3\57\2\0"+
    "\3\57\1\0\1\57\3\0\1\57\1\144\2\57\1\0"+
    "\1\57\1\0\3\57\4\0\2\57\1\0\3\57\1\0"+
    "\3\57\1\63\1\57\1\63\1\145\1\0\1\57\1\145"+
    "\1\146\2\57\1\146\11\57\10\0\1\57\1\63\1\57"+
    "\2\0\2\57\1\63\1\0\1\57\3\0\1\57\1\146"+
    "\1\57\1\63\1\0\1\146\1\0\3\57\4\0\2\57"+
    "\1\0\3\57\1\0\1\4\6\5\1\0\17\5\10\0"+
    "\1\4\2\5\2\0\3\5\1\0\1\4\3\0\4\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\1\5\1\147\1\5\1\0\1\4\6\5\1\0"+
    "\11\5\1\150\5\5\10\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\4\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\3\5\1\0\1\4"+
    "\6\5\1\0\4\5\1\151\12\5\10\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\1\0\1\4\6\5\1\0\5\5\1\152\3\5\1\153"+
    "\5\5\10\0\1\4\2\5\2\0\3\5\1\0\1\4"+
    "\3\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\3\5\1\0\1\4\6\5\1\0"+
    "\11\5\1\154\5\5\10\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\4\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\5\1\155\1\0\3\5\1\0"+
    "\1\4\6\5\1\0\10\5\1\76\6\5\10\0\1\4"+
    "\2\5\2\0\3\5\1\0\1\4\3\0\4\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\3\5\1\0\1\4\6\5\1\0\3\5\1\156\13\5"+
    "\10\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\1\0\1\4\6\5\1\0\15\5"+
    "\1\157\1\5\10\0\1\4\2\5\2\0\3\5\1\0"+
    "\1\4\3\0\4\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\3\5\1\0\1\4\6\5"+
    "\1\0\4\5\1\13\12\5\10\0\1\4\2\5\2\0"+
    "\3\5\1\0\1\4\3\0\4\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\1\0"+
    "\1\4\6\5\1\0\14\5\1\160\2\5\10\0\1\4"+
    "\2\5\2\0\3\5\1\0\1\4\3\0\4\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\1\5\1\161"+
    "\1\0\3\5\1\0\1\4\6\5\1\0\4\5\1\162"+
    "\12\5\10\0\1\4\2\5\2\0\3\5\1\0\1\4"+
    "\3\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\3\5\1\0\1\4\6\5\1\0"+
    "\1\163\5\5\1\71\1\164\7\5\10\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\1\0\1\4\6\5\1\0\10\5\1\165\6\5\10\0"+
    "\1\4\2\5\2\0\3\5\1\0\1\4\3\0\4\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\3\5\1\0\1\4\6\5\1\0\7\5\1\166"+
    "\7\5\10\0\1\4\2\5\2\0\3\5\1\0\1\4"+
    "\3\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\3\5\31\0\7\27\42\0\33\167"+
    "\1\170\6\167\1\0\65\167\1\171\3\167\1\170\6\167"+
    "\1\0\43\167\1\172\4\167\1\106\1\167\1\106\2\167"+
    "\1\106\4\167\1\106\2\167\1\106\3\167\1\173\3\167"+
    "\1\106\1\174\1\175\1\0\3\106\1\174\10\167\1\174"+
    "\13\167\1\106\5\167\5\113\1\34\4\113\1\34\1\113"+
    "\1\34\2\113\1\34\4\113\1\34\2\113\1\34\3\113"+
    "\1\34\3\113\2\34\1\176\1\0\4\34\3\0\5\113"+
    "\1\34\13\113\1\34\44\113\1\177\3\113\1\200\35\113"+
    "\1\4\6\5\1\0\7\5\1\201\7\5\10\0\1\4"+
    "\2\5\2\0\3\5\1\0\1\4\3\0\4\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\3\5\1\0\1\4\6\5\1\0\17\5\10\0\1\4"+
    "\2\5\2\0\3\5\1\0\1\4\3\0\4\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\2\5\1\202\1\0\1\4\6\5\1\0\17\5\10\0"+
    "\1\4\2\5\2\0\1\5\1\203\1\5\1\0\1\4"+
    "\3\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\3\5\1\0\3\57\4\204\1\0"+
    "\3\204\6\57\1\204\2\57\1\204\2\57\10\0\1\57"+
    "\1\204\1\57\2\0\1\57\2\204\1\0\1\57\3\0"+
    "\2\57\2\204\1\0\1\204\1\0\3\57\4\0\2\57"+
    "\1\0\3\57\1\0\7\57\1\0\17\57\10\0\3\57"+
    "\2\0\2\57\1\205\1\0\1\57\3\0\3\57\1\205"+
    "\1\0\1\57\1\0\3\57\4\0\2\57\1\0\3\57"+
    "\1\0\7\4\1\0\1\4\1\206\15\4\10\0\3\4"+
    "\2\0\3\4\1\0\1\4\3\0\4\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\3\4\1\0\7\4"+
    "\1\0\4\4\1\207\1\210\1\4\1\211\7\4\10\0"+
    "\3\4\2\0\3\4\1\0\1\4\3\0\4\4\1\0"+
    "\1\4\1\0\3\4\4\0\2\4\1\0\3\4\1\0"+
    "\7\4\1\0\2\4\1\212\1\4\1\213\12\4\10\0"+
    "\3\4\2\0\3\4\1\0\1\4\3\0\4\4\1\0"+
    "\1\4\1\0\3\4\4\0\2\4\1\0\3\4\1\0"+
    "\7\4\1\0\3\4\1\214\13\4\10\0\3\4\2\0"+
    "\3\4\1\0\1\4\3\0\4\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\3\4\1\0\7\4\1\0"+
    "\4\4\1\215\12\4\10\0\3\4\2\0\3\4\1\0"+
    "\1\4\3\0\4\4\1\0\1\4\1\0\3\4\4\0"+
    "\2\4\1\0\3\4\1\0\7\4\1\0\7\4\1\216"+
    "\7\4\10\0\3\4\2\0\3\4\1\0\1\4\3\0"+
    "\4\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\3\4\11\0\1\217\1\220\1\0\1\221\1\0\1\222"+
    "\4\0\1\223\1\224\25\0\2\130\43\0\1\225\106\0"+
    "\1\226\150\0\1\227\102\0\1\230\20\0\1\231\106\0"+
    "\1\232\150\0\1\233\102\0\1\234\3\0\3\57\1\142"+
    "\1\57\1\142\1\57\1\0\5\57\1\61\4\57\1\62"+
    "\4\57\10\0\1\57\1\142\1\57\2\0\2\57\1\142"+
    "\1\0\1\57\3\0\1\62\1\61\1\57\1\142\1\0"+
    "\1\57\1\0\3\57\4\0\2\57\1\0\3\57\4\0"+
    "\1\142\1\0\1\142\32\0\1\142\5\0\1\142\10\0"+
    "\1\142\21\0\3\57\1\235\1\57\1\235\1\57\1\236"+
    "\17\57\7\0\1\236\1\57\1\235\1\57\2\0\2\57"+
    "\1\235\1\0\1\57\3\0\3\57\1\235\1\0\1\57"+
    "\1\0\3\57\4\0\2\57\1\0\3\57\1\0\1\4"+
    "\6\5\1\0\12\5\1\237\4\5\10\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\1\0\1\4\6\5\1\0\7\5\1\240\1\241\6\5"+
    "\10\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\1\0\1\4\6\5\1\0\11\5"+
    "\1\13\5\5\10\0\1\4\2\5\2\0\3\5\1\0"+
    "\1\4\3\0\4\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\3\5\1\0\1\4\6\5"+
    "\1\0\6\5\1\242\10\5\10\0\1\4\2\5\2\0"+
    "\3\5\1\0\1\4\3\0\4\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\1\0"+
    "\1\4\6\5\1\0\14\5\1\76\2\5\10\0\1\4"+
    "\2\5\2\0\3\5\1\0\1\4\3\0\4\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\3\5\1\0\1\4\6\5\1\0\5\5\1\243\11\5"+
    "\10\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\1\0\1\4\6\5\1\0\1\5"+
    "\1\244\15\5\10\0\1\4\2\5\2\0\3\5\1\0"+
    "\1\4\3\0\4\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\3\5\1\0\1\4\6\5"+
    "\1\0\14\5\1\245\2\5\10\0\1\4\2\5\2\0"+
    "\3\5\1\0\1\4\3\0\4\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\1\0"+
    "\1\4\6\5\1\0\3\5\1\246\13\5\10\0\1\4"+
    "\2\5\2\0\3\5\1\0\1\4\3\0\4\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\3\5\1\0\1\4\6\5\1\0\5\5\1\247\11\5"+
    "\10\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\1\0\1\4\6\5\1\0\10\5"+
    "\1\250\6\5\10\0\1\4\2\5\2\0\3\5\1\0"+
    "\1\4\3\0\4\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\3\5\1\0\1\4\6\5"+
    "\1\0\6\5\1\251\10\5\10\0\1\4\2\5\2\0"+
    "\3\5\1\0\1\4\3\0\4\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\252\1\0\3\5"+
    "\1\0\1\4\6\5\1\0\1\5\1\253\15\5\10\0"+
    "\1\4\2\5\2\0\3\5\1\0\1\4\3\0\4\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\3\5\1\0\1\4\6\5\1\0\14\5\1\254"+
    "\2\5\10\0\1\4\2\5\2\0\3\5\1\0\1\4"+
    "\3\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\3\5\1\0\1\4\6\5\1\0"+
    "\15\5\1\255\1\5\10\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\4\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\3\5\1\0\1\4"+
    "\6\5\1\0\1\5\1\76\12\5\1\76\2\5\10\0"+
    "\1\4\2\5\2\0\3\5\1\0\1\4\3\0\4\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\3\5\1\0\33\167\1\110\6\167\1\0\66\167"+
    "\3\106\1\173\3\106\3\167\1\0\43\167\1\106\25\167"+
    "\1\170\4\167\1\106\1\167\1\0\3\167\1\106\10\167"+
    "\1\106\21\167\33\0\1\170\45\0\5\167\1\172\25\167"+
    "\1\170\4\167\1\172\1\167\1\0\3\167\1\172\10\167"+
    "\1\172\24\167\4\256\1\167\3\256\6\167\1\256\2\167"+
    "\1\256\6\167\1\110\4\167\1\256\1\167\1\0\2\167"+
    "\2\256\7\167\2\256\1\167\1\256\17\167\3\113\4\257"+
    "\1\113\3\257\6\113\1\257\2\113\1\257\12\113\1\177"+
    "\1\257\2\113\1\200\1\113\2\257\7\113\2\257\1\113"+
    "\1\257\61\113\1\0\4\113\3\0\27\113\1\4\6\5"+
    "\1\0\1\260\16\5\10\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\4\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\3\5\1\0\1\4"+
    "\6\5\1\0\3\5\1\242\13\5\10\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\1\0\1\4\6\5\1\0\5\5\1\261\11\5\10\0"+
    "\1\4\2\5\2\0\3\5\1\0\1\4\3\0\4\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\3\5\1\0\3\57\4\204\1\0\3\204\2\57"+
    "\1\262\3\57\1\204\1\263\1\57\1\204\2\57\10\0"+
    "\1\57\1\204\1\57\2\0\1\57\2\204\1\0\1\57"+
    "\3\0\1\263\1\262\2\204\1\0\1\204\1\0\3\57"+
    "\4\0\2\57\1\0\3\57\1\0\7\57\1\0\5\57"+
    "\1\262\4\57\1\263\4\57\10\0\3\57\2\0\2\57"+
    "\1\205\1\0\1\57\3\0\1\263\1\262\1\57\1\205"+
    "\1\0\1\57\1\0\3\57\4\0\2\57\1\0\3\57"+
    "\1\0\7\4\1\0\2\4\1\125\14\4\10\0\3\4"+
    "\2\0\3\4\1\0\1\4\3\0\4\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\3\4\1\0\7\4"+
    "\1\0\1\264\16\4\10\0\3\4\2\0\3\4\1\0"+
    "\1\4\3\0\4\4\1\0\1\4\1\0\3\4\4\0"+
    "\2\4\1\0\3\4\1\0\7\4\1\0\3\4\1\265"+
    "\2\4\1\266\10\4\10\0\3\4\2\0\3\4\1\0"+
    "\1\4\3\0\4\4\1\0\1\4\1\0\3\4\4\0"+
    "\2\4\1\0\3\4\1\0\7\4\1\0\7\4\1\267"+
    "\7\4\10\0\3\4\2\0\3\4\1\0\1\4\3\0"+
    "\4\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\3\4\1\0\7\4\1\0\1\270\3\4\1\215\12\4"+
    "\10\0\3\4\2\0\3\4\1\0\1\4\3\0\4\4"+
    "\1\0\1\4\1\0\3\4\4\0\2\4\1\0\3\4"+
    "\1\0\7\4\1\0\11\4\1\271\5\4\10\0\3\4"+
    "\2\0\3\4\1\0\1\4\3\0\4\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\3\4\1\0\7\4"+
    "\1\0\4\4\1\266\12\4\10\0\3\4\2\0\3\4"+
    "\1\0\1\4\3\0\4\4\1\0\1\4\1\0\3\4"+
    "\4\0\2\4\1\0\3\4\1\0\7\4\1\0\1\270"+
    "\16\4\10\0\3\4\2\0\3\4\1\0\1\4\3\0"+
    "\4\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\3\4\1\0\7\4\1\0\14\4\1\272\2\4\10\0"+
    "\3\4\2\0\3\4\1\0\1\4\3\0\4\4\1\0"+
    "\1\4\1\0\3\4\4\0\2\4\1\0\3\4\12\0"+
    "\1\273\103\0\1\274\1\275\1\0\1\276\73\0\1\277"+
    "\1\0\1\300\77\0\1\301\101\0\1\302\103\0\1\303"+
    "\72\0\1\226\163\0\1\304\27\0\1\305\135\0\1\306"+
    "\31\0\1\232\163\0\1\307\27\0\1\310\135\0\1\311"+
    "\20\0\3\57\1\235\1\57\1\235\1\57\1\0\2\57"+
    "\1\146\2\57\1\146\11\57\10\0\1\57\1\235\1\57"+
    "\2\0\2\57\1\235\1\0\1\57\3\0\1\57\1\146"+
    "\1\57\1\235\1\0\1\146\1\0\3\57\4\0\2\57"+
    "\1\0\3\57\4\0\1\235\1\0\1\235\32\0\1\235"+
    "\5\0\1\235\10\0\1\235\21\0\1\4\6\5\1\0"+
    "\14\5\1\312\2\5\10\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\4\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\3\5\1\0\1\4"+
    "\6\5\1\0\1\5\1\313\15\5\10\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\1\0\1\4\6\5\1\0\5\5\1\314\11\5\10\0"+
    "\1\4\2\5\2\0\3\5\1\0\1\4\3\0\4\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\3\5\1\0\1\4\6\5\1\0\10\5\1\247"+
    "\6\5\10\0\1\4\2\5\2\0\3\5\1\0\1\4"+
    "\3\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\3\5\1\0\1\4\6\5\1\0"+
    "\12\5\1\153\4\5\10\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\4\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\3\5\1\0\1\4"+
    "\6\5\1\0\3\5\1\315\13\5\10\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\1\0\1\4\6\5\1\0\11\5\1\242\5\5\10\0"+
    "\1\4\2\5\2\0\3\5\1\0\1\4\3\0\4\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\3\5\1\0\1\4\6\5\1\0\7\5\1\316"+
    "\7\5\10\0\1\4\2\5\2\0\3\5\1\0\1\4"+
    "\3\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\3\5\1\0\1\4\6\5\1\0"+
    "\17\5\10\0\1\4\2\5\2\0\3\5\1\0\1\4"+
    "\3\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\1\5\1\76\1\0\3\5\1\0\1\4\6\5"+
    "\1\0\7\5\1\317\7\5\10\0\1\4\2\5\2\0"+
    "\3\5\1\0\1\4\3\0\4\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\1\0"+
    "\1\4\6\5\1\0\3\5\1\320\13\5\10\0\1\4"+
    "\2\5\2\0\3\5\1\0\1\4\3\0\4\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\3\5\1\0\1\4\6\5\1\0\11\5\1\321\5\5"+
    "\10\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\1\0\1\4\6\5\1\0\7\5"+
    "\1\322\7\5\10\0\1\4\2\5\2\0\3\5\1\0"+
    "\1\4\3\0\4\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\3\5\1\0\3\167\4\106"+
    "\1\167\3\106\6\167\1\106\2\167\1\106\6\167\1\110"+
    "\4\167\1\106\1\167\1\0\2\167\2\106\7\167\2\106"+
    "\1\167\1\106\17\167\3\113\4\34\1\113\3\34\6\113"+
    "\1\34\2\113\1\34\12\113\1\177\1\34\2\113\1\200"+
    "\1\113\2\34\7\113\2\34\1\113\1\34\17\113\1\4"+
    "\6\5\1\0\14\5\1\323\2\5\10\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\1\0\1\4\6\5\1\0\3\5\1\324\13\5\10\0"+
    "\1\4\2\5\2\0\3\5\1\0\1\4\3\0\4\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\3\5\1\0\7\57\1\0\12\57\1\325\4\57"+
    "\10\0\3\57\2\0\3\57\1\0\1\57\3\0\1\325"+
    "\3\57\1\0\1\57\1\0\3\57\4\0\2\57\1\0"+
    "\3\57\1\0\7\57\1\0\5\57\1\325\11\57\10\0"+
    "\3\57\2\0\3\57\1\0\1\57\3\0\1\57\1\325"+
    "\2\57\1\0\1\57\1\0\3\57\4\0\2\57\1\0"+
    "\3\57\1\0\7\4\1\0\3\4\1\265\13\4\10\0"+
    "\3\4\2\0\3\4\1\0\1\4\3\0\4\4\1\0"+
    "\1\4\1\0\3\4\4\0\2\4\1\0\3\4\1\0"+
    "\7\4\1\0\2\4\1\326\14\4\10\0\3\4\2\0"+
    "\3\4\1\0\1\4\3\0\4\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\3\4\1\0\7\4\1\0"+
    "\1\4\1\326\15\4\10\0\3\4\2\0\3\4\1\0"+
    "\1\4\3\0\4\4\1\0\1\4\1\0\3\4\4\0"+
    "\2\4\1\0\3\4\1\0\7\4\1\0\10\4\1\327"+
    "\6\4\10\0\3\4\2\0\3\4\1\0\1\4\3\0"+
    "\4\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\3\4\1\0\7\4\1\0\1\4\1\265\15\4\10\0"+
    "\3\4\2\0\3\4\1\0\1\4\3\0\4\4\1\0"+
    "\1\4\1\0\3\4\4\0\2\4\1\0\3\4\1\0"+
    "\7\4\1\0\5\4\1\330\11\4\10\0\3\4\2\0"+
    "\3\4\1\0\1\4\3\0\4\4\1\0\1\4\1\0"+
    "\3\4\4\0\2\4\1\0\3\4\1\0\7\4\1\0"+
    "\15\4\1\331\1\4\10\0\3\4\2\0\3\4\1\0"+
    "\1\4\3\0\4\4\1\0\1\4\1\0\3\4\4\0"+
    "\2\4\1\0\3\4\13\0\1\222\76\0\1\332\103\0"+
    "\1\333\2\0\1\334\101\0\1\335\71\0\1\336\3\0"+
    "\1\302\105\0\1\337\73\0\1\334\74\0\1\336\114\0"+
    "\1\340\106\0\1\341\64\0\1\226\55\0\1\304\5\0"+
    "\1\306\1\342\4\306\1\342\17\306\3\342\1\306\1\342"+
    "\1\0\2\342\1\0\2\306\2\0\3\306\4\0\1\342"+
    "\4\306\1\342\1\306\1\0\1\342\1\306\5\342\2\306"+
    "\1\342\3\306\33\0\1\343\64\0\1\232\55\0\1\307"+
    "\5\0\1\311\1\344\4\311\1\344\17\311\3\344\1\311"+
    "\1\344\1\0\2\344\1\0\2\311\2\0\3\311\4\0"+
    "\1\344\4\311\1\344\1\311\1\0\1\344\1\311\5\344"+
    "\2\311\1\344\3\311\1\0\1\4\6\5\1\0\4\5"+
    "\1\345\12\5\10\0\1\4\2\5\2\0\3\5\1\0"+
    "\1\4\3\0\4\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\3\5\1\0\1\4\6\5"+
    "\1\0\17\5\10\0\1\4\2\5\2\0\1\156\2\5"+
    "\1\0\1\4\3\0\4\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\3\5\1\0\1\4"+
    "\6\5\1\0\17\5\10\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\4\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\1\153\1\5\1\0\3\5\1\0"+
    "\1\4\6\5\1\0\7\5\1\242\7\5\10\0\1\4"+
    "\2\5\2\0\3\5\1\0\1\4\3\0\4\5\1\0"+
    "\1\5\1\0\1\4\1\5\1\4\4\0\2\5\1\0"+
    "\3\5\1\0\1\4\6\5\1\0\4\5\1\346\12\5"+
    "\10\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\1\0\1\4\6\5\1\0\14\5"+
    "\1\347\2\5\10\0\1\4\2\5\2\0\3\5\1\0"+
    "\1\4\3\0\4\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\3\5\1\0\1\4\6\5"+
    "\1\0\14\5\1\247\2\5\10\0\1\4\2\5\2\0"+
    "\3\5\1\0\1\4\3\0\4\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\1\0"+
    "\1\4\6\5\1\0\17\5\10\0\1\4\2\5\2\0"+
    "\3\5\1\0\1\4\3\0\4\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\1\5\1\350\1\0\3\5"+
    "\1\0\1\4\6\5\1\0\14\5\1\351\2\5\10\0"+
    "\1\4\2\5\2\0\3\5\1\0\1\4\3\0\4\5"+
    "\1\0\1\5\1\0\1\4\1\5\1\4\4\0\2\5"+
    "\1\0\3\5\1\0\1\4\6\5\1\0\1\155\16\5"+
    "\10\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\1\0\1\4\6\5\1\0\10\5"+
    "\1\352\6\5\10\0\1\4\2\5\2\0\3\5\1\0"+
    "\1\4\3\0\4\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\3\5\1\0\7\4\1\0"+
    "\7\4\1\326\7\4\10\0\3\4\2\0\3\4\1\0"+
    "\1\4\3\0\4\4\1\0\1\4\1\0\3\4\4\0"+
    "\2\4\1\0\3\4\1\0\7\4\1\0\12\4\1\353"+
    "\4\4\10\0\3\4\2\0\3\4\1\0\1\4\3\0"+
    "\4\4\1\0\1\4\1\0\3\4\4\0\2\4\1\0"+
    "\3\4\1\0\7\4\1\0\16\4\1\354\10\0\3\4"+
    "\2\0\3\4\1\0\1\4\3\0\4\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\3\4\14\0\1\333"+
    "\77\0\1\355\77\0\1\355\107\0\1\356\71\0\1\333"+
    "\104\0\1\357\110\0\1\360\105\0\1\306\100\0\1\311"+
    "\46\0\1\4\6\5\1\0\17\5\10\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\71\1\0"+
    "\3\5\1\0\1\4\6\5\1\0\1\5\1\76\15\5"+
    "\10\0\1\4\2\5\2\0\3\5\1\0\1\4\3\0"+
    "\4\5\1\0\1\5\1\0\1\4\1\5\1\4\4\0"+
    "\2\5\1\0\3\5\1\0\1\4\6\5\1\0\7\5"+
    "\1\361\7\5\10\0\1\4\2\5\2\0\3\5\1\0"+
    "\1\4\3\0\4\5\1\0\1\5\1\0\1\4\1\5"+
    "\1\4\4\0\2\5\1\0\3\5\1\0\1\4\6\5"+
    "\1\0\1\5\1\362\15\5\10\0\1\4\2\5\2\0"+
    "\3\5\1\0\1\4\3\0\4\5\1\0\1\5\1\0"+
    "\1\4\1\5\1\4\4\0\2\5\1\0\3\5\1\0"+
    "\1\4\6\5\1\0\16\5\1\153\10\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\1\0\1\4\6\5\1\0\17\5\10\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\1\5\1\363\1\0"+
    "\3\5\1\0\7\4\1\0\1\266\16\4\10\0\3\4"+
    "\2\0\3\4\1\0\1\4\3\0\4\4\1\0\1\4"+
    "\1\0\3\4\4\0\2\4\1\0\3\4\1\0\7\4"+
    "\1\0\14\4\1\326\2\4\10\0\3\4\2\0\3\4"+
    "\1\0\1\4\3\0\4\4\1\0\1\4\1\0\3\4"+
    "\4\0\2\4\1\0\3\4\20\0\1\355\103\0\1\364"+
    "\104\0\1\365\52\0\1\4\6\5\1\0\3\5\1\71"+
    "\13\5\10\0\1\4\2\5\2\0\3\5\1\0\1\4"+
    "\3\0\4\5\1\0\1\5\1\0\1\4\1\5\1\4"+
    "\4\0\2\5\1\0\3\5\1\0\1\4\6\5\1\0"+
    "\7\5\1\247\7\5\10\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\4\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\3\5\1\0\1\4"+
    "\6\5\1\0\1\5\1\366\15\5\10\0\1\4\2\5"+
    "\2\0\3\5\1\0\1\4\3\0\4\5\1\0\1\5"+
    "\1\0\1\4\1\5\1\4\4\0\2\5\1\0\3\5"+
    "\11\0\1\334\114\0\1\355\54\0\1\4\6\5\1\0"+
    "\11\5\1\153\5\5\10\0\1\4\2\5\2\0\3\5"+
    "\1\0\1\4\3\0\4\5\1\0\1\5\1\0\1\4"+
    "\1\5\1\4\4\0\2\5\1\0\3\5\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14430];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\20\1\1\11\2\1\2\11\2\1\1\11\7\1"+
    "\1\11\2\1\1\11\5\1\1\11\26\1\1\0\2\11"+
    "\2\1\1\11\3\1\1\11\13\1\3\0\1\11\6\0"+
    "\1\1\1\0\24\1\1\11\7\1\1\11\16\1\16\0"+
    "\1\1\1\0\34\1\4\0\1\1\6\0\1\1\2\0"+
    "\21\1\13\0\10\1\1\11\3\0\3\1\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[246];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public PortugolTokenMaker() {
		super();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * Returns the text to place at the beginning and end of a
	 * line to "comment" it in a this programming language.
	 *
	 * @return The start and end strings to add to a line to "comment"
	 *         it out.
	 */
	public String[] getLineCommentStartAndEnd() {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
			case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;
			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 * @exception   IOException  if any I/O-Error occurs.
	 */
	private boolean zzRefill() throws java.io.IOException {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) throws java.io.IOException {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PortugolTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 208) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public br.univali.ps.dominio yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 247: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 248: break;
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 249: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addToken(Token.ERROR_IDENTIFIER);
            }
          case 30: break;
          case 2: 
            { addToken(Token.IDENTIFIER);
            }
          case 31: break;
          case 3: 
            { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
            }
          case 32: break;
          case 4: 
            { addToken(Token.OPERATOR);
            }
          case 33: break;
          case 5: 
            { addToken(Token.RESERVED_WORD);
            }
          case 34: break;
          case 6: 
            { addToken(Token.SEPARATOR);
            }
          case 35: break;
          case 7: 
            { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
            }
          case 36: break;
          case 8: 
            { addNullToken(); return firstToken;
            }
          case 37: break;
          case 9: 
            { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
            }
          case 38: break;
          case 10: 
            { addToken(Token.WHITESPACE);
            }
          case 39: break;
          case 11: 
            { 
            }
          case 40: break;
          case 12: 
            { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
          case 41: break;
          case 13: 
            { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
          case 42: break;
          case 14: 
            { addToken(Token.ERROR_NUMBER_FORMAT);
            }
          case 43: break;
          case 15: 
            { addToken(Token.LITERAL_NUMBER_FLOAT);
            }
          case 44: break;
          case 16: 
            { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
            }
          case 45: break;
          case 17: 
            { start = zzMarkedPos-2; yybegin(MLC);
            }
          case 46: break;
          case 18: 
            { addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
            }
          case 47: break;
          case 19: 
            { addToken(Token.ERROR_CHAR);
            }
          case 48: break;
          case 20: 
            { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
            }
          case 49: break;
          case 21: 
            { yybegin(YYINITIAL); addToken(start,zzStartRead+1, Token.COMMENT_MULTILINE);
            }
          case 50: break;
          case 22: 
            { addToken(Token.LITERAL_CHAR);
            }
          case 51: break;
          case 23: 
            { addToken(Token.ERROR_STRING_DOUBLE);
            }
          case 52: break;
          case 24: 
            { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
            }
          case 53: break;
          case 25: 
            { addToken(Token.PREPROCESSOR);
            }
          case 54: break;
          case 26: 
            { addToken(Token.FUNCTION);
            }
          case 55: break;
          case 27: 
            { addToken(Token.DATA_TYPE);
            }
          case 56: break;
          case 28: 
            { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
            }
          case 57: break;
          case 29: 
            { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
            }
          case 58: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
