# Properties file which configures the operation of the JDK 
# logging facility.

# The system will look for this config file, first using 
# a System property specified at startup: 
# 
# >java -Djava.util.logging.config.file=myLoggingConfigFilePath 
# 
# If this property is not specified, then the config file is 
# retrieved from its default location at: 
# 
# JDK_HOME/jre/lib/logging.properties

# Global logging properties. 
# ------------------------------------------ 
# The set of handlers to be loaded upon startup. 
# Comma-separated list of class names. 
# (? LogManager docs say no comma here, but JDK example has comma.) 
#handlers=java.util.logging.ConsoleHandler
handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# Default global logging level. 
# Loggers and Handlers may override this level 
.level=INFO

# Loggers 
# ------------------------------------------ 
# Loggers are usually attached to packages. 
# Here, the level for each package is specified. 
# The global level is used by default, so levels 
# specified here simply act as an override. 

#vs.network.level=INFO
#vs.audio.drivers.asio.level=INFO
#vs.network.buffer.level=OFF

#vs.controller=WARNING 
#vs.network.level=FINEST 
#myapp.business.level=CONFIG 
#myapp.data.level=SEVERE

# Handlers 
# -----------------------------------------

# --- ConsoleHandler --- 
# Override of global logging level 
java.util.logging.ConsoleHandler.level=SEVERE
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter


# Style of output (Simple or XML): 
java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter
java.util.logging.FileHandler.pattern = log.txt
java.util.logging.FileHandler.level=WARNING

#os n\u00fameros significam: 1-date, 2-source, 3-logger, 4-level, 5-message, 6-thrown
java.util.logging.SimpleFormatter.format=%4$s [%1$tH:%1$tM:%1$tS:%1$tL]: %5$s [%2$s] %6$s %n

cz.vutbr.web.csskit.antlr.SimplePreparator.level=SEVERE
